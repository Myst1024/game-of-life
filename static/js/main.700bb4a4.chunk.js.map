{"version":3,"sources":["components/Header.js","components/Cell.js","components/Game.js","App.js","index.js"],"names":["Header","react_default","a","createElement","Typography","className","align","component","variant","Cell","_ref","x","y","setCell","value","board","tree","alt","src","bear","onClick","Game","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","bind","assertThisInitialized","state","width","height","_this2","map","row","xIndex","column","cell","yIndex","components_Cell","key","concat","newBoard","setState","toConsumableArray","Array","fill","_this3","alive","neighbors","countNeighbors","includes","xShift","yShift","xTest","yTest","length","createNewBoard","_this4","display","createDisplay","Paper","RemoveCircleOutline_default","AddCircleOutline_default","Button","color","nextGeneration","Component","App","components_Header","components_Game","ReactDOM","render","src_App","document","getElementById"],"mappings":"8MASeA,EANA,WACX,OACIC,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYC,UAAU,cAAcC,MAAM,SAASC,UAAU,KAAKC,QAAQ,MAA1E,6ECIOC,EAPF,SAAAC,GAA8B,IAA3BC,EAA2BD,EAA3BC,EAAGC,EAAwBF,EAAxBE,EAAGC,EAAqBH,EAArBG,QACZC,EADiCJ,EAAZK,MACPJ,GAAGC,GACjBI,EAAOf,EAAAC,EAAAC,cAAA,OAAKc,IAAI,OAAOC,IAAI,oCAC3BC,EAAOlB,EAAAC,EAAAC,cAAA,OAAKc,IAAI,OAAOC,IAAI,oCACjC,OAAOjB,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OAAOe,QAAS,kBAAMP,EAAQF,EAAGC,EAAGE,KAASA,GAASK,GAAgB,IAAVL,GAAmBE,sDC8H1FK,cA3HX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDT,QAAQU,EAAKV,QAAQiB,KAAbN,OAAAO,EAAA,EAAAP,CAAAD,IACbA,EAAKS,MAAQ,CACTC,MAAO,EACPC,OAAQ,EACRnB,MAAO,CAAC,EAAC,GAAO,GAAO,GAAO,EAAC,GAAO,GAAO,GAAO,EAAC,GAAO,GAAO,KANxDQ,+EAWH,IAAAY,EAAAT,KAkBZ,OAjBgBA,KAAKM,MAAMjB,MAAMqB,IAAI,SAACC,EAAKC,GACvC,IAAMC,EAASF,EAAID,IAAI,SAACI,EAAMC,GAC1B,OACIxC,EAAAC,EAAAC,cAACuC,EAAD,CACIC,IAAG,IAAAC,OAAMN,EAAN,KAAAM,OAAgBH,GACnB9B,EAAG2B,EACH1B,EAAG6B,EACH5B,QAASsB,EAAKtB,QACdE,MAAOoB,EAAKH,MAAMjB,UAK9B,OACId,EAAAC,EAAAC,cAAA,OAAKwC,IAAK,MAAQL,EAAQjC,UAAU,eAAekC,qCAOvD5B,EAAGC,EAAGE,GACV,IAAI+B,EAAWnB,KAAKM,MAAMjB,MAC1B8B,EAASlC,GAAGC,IAAME,EAClBY,KAAKoB,SAAS,CAAC/B,MAAO8B,2CAIXZ,EAAOC,GAElB,OADiBV,OAAAuB,EAAA,EAAAvB,CAAIwB,MAAMd,IAASE,IAAI,kBAAMY,MAAMf,GAAOgB,MAAK,8CAInD,IAAAC,EAAAxB,KAETmB,EAAWnB,KAAKM,MAAMjB,MAAMqB,IAAI,SAACC,EAAK1B,GACtC,OAAO0B,EAAID,IAAI,SAACI,EAAM5B,GAClB,IAAIuC,GAAQ,EACNC,EAAYF,EAAKG,eAAe1C,EAAGC,GAQzC,OANI4B,GAAQ,CAAC,EAAG,GAAGc,SAASF,GACxBD,GAAQ,EAEa,IAAdC,IACPD,GAAQ,GAELA,MAGfzB,KAAKoB,SAAS,CAAC/B,MAAO8B,2CAIXlC,EAAGC,GAId,IAHA,IAAMG,EAAQW,KAAKM,MAAMjB,MACrBqC,EAAY,EAEPG,GAAU,EAAGA,EAAS,EAAGA,IAC9B,IAAK,IAAIC,GAAU,EAAGA,EAAS,EAAGA,IAE9B,GAAiB,IAAXD,GAA2B,IAAXC,EAAe,CACjC,IAAMC,EAAQ9C,EAAI4C,EACZG,EAAQ9C,EAAI4C,EAEU,qBAAjBzC,EAAM0C,KAAiC1C,EAAM0C,GAAiB,cAAVC,GAApB,IAEnC3C,EAAM0C,GAAOC,IACbN,IAQpB,OAAOA,+CAKH1B,KAAKM,MAAMjB,MAAM4C,SAAWjC,KAAKM,MAAME,QAAUR,KAAKM,MAAMjB,MAAM,GAAG4C,SAAWjC,KAAKM,MAAMC,OAC3FP,KAAKoB,SAAS,CAAC/B,MAAOW,KAAKkC,eAAelC,KAAKM,MAAMC,MAAOP,KAAKM,MAAME,2CAItE,IAAA2B,EAAAnC,KAICoC,EAAUpC,KAAKqC,gBAErB,OACI9D,EAAAC,EAAAC,cAAC6D,EAAA,EAAD,CAAO3D,UAAU,QACbJ,EAAAC,EAAAC,cAAA,OAAKE,UAAU,YACXJ,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYG,UAAU,OAAOC,QAAQ,MAArC,aACAP,EAAAC,EAAAC,cAAC8D,EAAA/D,EAAD,CAAyBG,UAAU,YAAYe,QAAS,kBAAMyC,EAAKf,SAAS,CAACb,MAAO4B,EAAK7B,MAAMC,MAAQ,OACvGhC,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CAAsBG,UAAU,YAAYe,QAAS,kBAAMyC,EAAKf,SAAS,CAACb,MAAO4B,EAAK7B,MAAMC,MAAQ,OACpGhC,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAACC,EAAA,EAAD,CAAYG,UAAU,OAAOC,QAAQ,MAArC,UACAP,EAAAC,EAAAC,cAAC8D,EAAA/D,EAAD,CAAyBG,UAAU,YAAYe,QAAS,kBAAMyC,EAAKf,SAAS,CAACZ,OAAQ2B,EAAK7B,MAAME,OAAS,OACzGjC,EAAAC,EAAAC,cAAC+D,EAAAhE,EAAD,CAAsBG,UAAU,YAAYe,QAAS,kBAAMyC,EAAKf,SAAS,CAACZ,OAAQ2B,EAAK7B,MAAME,OAAS,QAE1GjC,EAAAC,EAAAC,cAAA,OAAKE,UAAU,SACVyD,GAEL7D,EAAAC,EAAAC,cAACgE,EAAA,EAAD,CAAQ9D,UAAU,WAAWG,QAAQ,YAAY4D,MAAM,UAAUhD,QAAS,kBAAMyC,EAAKQ,mBAArF,0BAtHGC,aCUJC,MAZf,WAIE,OACEtE,EAAAC,EAAAC,cAAA,OAAKE,UAAU,OACbJ,EAAAC,EAAAC,cAACqE,EAAD,MACAvE,EAAAC,EAAAC,cAACsE,EAAD,cCRNC,IAASC,OAAO1E,EAAAC,EAAAC,cAACyE,EAAD,MAASC,SAASC,eAAe","file":"static/js/main.700bb4a4.chunk.js","sourcesContent":["import React from 'react';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst Header = () => {\r\n    return (\r\n        <Typography className=\"page-header\" align='center' component='h1' variant='h2'>The Game of Life</Typography>\r\n    )\r\n}\r\n\r\nexport default Header","import React from 'react';\r\n\r\nconst Cell = ({ x, y, setCell, board }) => {\r\n    const value = board[x][y];\r\n    const tree = <img alt=\"tree\" src=\"https://i.imgur.com/DS2hAeo.png\"/>\r\n    const bear = <img alt=\"bear\" src=\"https://i.imgur.com/5EfAEdA.png\"/>\r\n    return <div className=\"cell\" onClick={() => setCell(x, y, value)}>{value && bear}{value === false && tree}</div>\r\n}\r\n\r\nexport default Cell","import React, { Component } from 'react';\r\nimport Cell from './Cell';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport AddCircleOutlineIcon from '@material-ui/icons/AddCircleOutline'\r\nimport RemoveCircleOutlineIcon from '@material-ui/icons/RemoveCircleOutline'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass Game extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.setCell=this.setCell.bind(this);\r\n        this.state = {\r\n            width: 3,\r\n            height: 3,\r\n            board: [[false, false, false],[false, false, false],[false, false, false]]\r\n        }\r\n    }\r\n\r\n    // takes 2D board array and generates a grid of <Cell>s based on board dimensions\r\n    createDisplay() {\r\n        const display = this.state.board.map((row, xIndex) => {\r\n            const column = row.map((cell, yIndex) => {\r\n                return (\r\n                    <Cell \r\n                        key={`x${xIndex}y${yIndex}`} \r\n                        x={xIndex} \r\n                        y={yIndex} \r\n                        setCell={this.setCell}\r\n                        board={this.state.board}\r\n                    />\r\n                )\r\n            })\r\n\r\n            return (\r\n                <div key={\"row\" + xIndex} className=\"game-column\">{column}</div>\r\n            )\r\n        });\r\n        return display\r\n    }\r\n\r\n    // Updates targeted cell with value parameter\r\n    setCell(x, y, value) {\r\n        let newBoard = this.state.board;\r\n        newBoard[x][y] = !value;\r\n        this.setState({board: newBoard});\r\n    }\r\n    \r\n    // Creates a new board based on x and y parameters\r\n    createNewBoard(width, height) {\r\n        const newBoard = [...Array(height)].map(() => Array(width).fill(false));\r\n        return newBoard;\r\n    }\r\n\r\n    nextGeneration() {\r\n        \r\n        let newBoard = this.state.board.map((row, x) => {\r\n            return row.map((cell, y) => {\r\n                let alive = false;\r\n                const neighbors = this.countNeighbors(x, y)\r\n                // if alive with 2 or 3 neighbors, live\r\n                if (cell && [2, 3].includes(neighbors)) {\r\n                    alive = true;\r\n                // if dead with 3 neighbors, live\r\n                } else if (neighbors === 3) {\r\n                    alive = true;\r\n                }\r\n                return alive;\r\n            })\r\n        });\r\n        this.setState({board: newBoard})\r\n    }\r\n\r\n    // Returns the number of \"live\" neighbors from passed coordinate\r\n    countNeighbors(x, y) {\r\n        const board = this.state.board\r\n        let neighbors = 0\r\n        //checking all neighboring arrays by shifting the x and y coordinates by -1, 0, and 1\r\n        for (let xShift = -1; xShift < 2; xShift++) {\r\n            for (let yShift = -1; yShift < 2; yShift++) {\r\n                // Making sure we arent testing the current cell (0,0)\r\n                if (!(xShift === 0 && yShift === 0)) {\r\n                    const xTest = x + xShift;\r\n                    const yTest = y + yShift;\r\n                    // checking if tested cell exists\r\n                    if (typeof board[xTest] !== \"undefined\" && typeof board[xTest][yTest !== \"undefined\"]) {\r\n                        // if the tested neighbor is true, increment neighbors\r\n                        if (board[xTest][yTest]) {\r\n                            neighbors++;\r\n                        }\r\n                    }\r\n                }\r\n                \r\n            }\r\n        }\r\n        // Mr. Rogers would be proud\r\n        return neighbors;\r\n    }\r\n\r\n    componentDidUpdate() {\r\n        // if height or width of the board have changed, create a new board with updated dimensions\r\n        if (this.state.board.length !== this.state.height || this.state.board[0].length !== this.state.width) {\r\n            this.setState({board: this.createNewBoard(this.state.width, this.state.height)});\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n\r\n\r\n        const display = this.createDisplay();\r\n        \r\n        return (\r\n            <Paper className=\"game\">\r\n                <div className=\"controls\">\r\n                    <Typography component='span' variant='h6'>Columns: </Typography>\r\n                    <RemoveCircleOutlineIcon className=\"addRemove\" onClick={() => this.setState({width: this.state.width - 1})} />\r\n                    <AddCircleOutlineIcon className=\"addRemove\" onClick={() => this.setState({width: this.state.width + 1})} />\r\n                    <br />\r\n                    <Typography component='span' variant='h6'>Rows: </Typography>\r\n                    <RemoveCircleOutlineIcon className=\"addRemove\" onClick={() => this.setState({height: this.state.height - 1})} />\r\n                    <AddCircleOutlineIcon className=\"addRemove\" onClick={() => this.setState({height: this.state.height + 1})}/>\r\n                </div>\r\n                <div className=\"board\">\r\n                    {display}\r\n                </div>\r\n                <Button className=\"next-gen\" variant=\"contained\" color=\"primary\" onClick={() => this.nextGeneration()}>New Generation</Button>\r\n            </Paper>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Game","import React from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport Game from './components/Game';\n\n\nfunction App() {\n\n\n\n  return (\n    <div className=\"App\">\n      <Header />\n      <Game />\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport 'typeface-roboto';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}